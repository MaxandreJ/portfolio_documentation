{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my portfolio website! My name is Maxandre Jacqueline and I am currently looking for my first position as a technical writer. You can find samples of my work on this website. For now, I have only finished one tutorial, but I am planning to write more. My entire portfolio, including PDF documents, can be found on my Clippings website . For more information on me, please consult my LinkedIn profile . Finally, you can find some programs that I developed on my GitHub repository .","title":"Home"},{"location":"#welcome-to-my-portfolio-website","text":"My name is Maxandre Jacqueline and I am currently looking for my first position as a technical writer. You can find samples of my work on this website. For now, I have only finished one tutorial, but I am planning to write more. My entire portfolio, including PDF documents, can be found on my Clippings website . For more information on me, please consult my LinkedIn profile . Finally, you can find some programs that I developed on my GitHub repository .","title":"Welcome to my portfolio website!"},{"location":"tutorials/callback/","text":"Introduction to callbacks This document introduces the notion of a callback , with a focus on its implementation in JavaScript. This document does not provide a comprehensive introduction to JavaScript (for one, please refer to w3schools , for example). The notion of a callback is particularly important to understand for programming in JavaScript. JavaScript is often used to write web applications, which commonly contain numerous callbacks. I wrote this document for people who are already familiar with one programming language, but are only beginning to learn Javascript. Three concepts are essential to understand callbacks: A function is a section of code that can be called. An argument can be passed to a function as input. Asynchronous code is code that is executed with a delay after being called. A callback is a function that is passed as an argument to another function. You may want to use callbacks: as part of your programming style, or to write asynchronous code. Next, you will learn about these uses in more detail. Callbacks as part of your programming style You can use callbacks to make your code appear more functional . Functional programming is a style of programming where your code relies on functions. Functional programming is often contrasted with imperative programming , where code relies on instructions. Imagine that you would like to write some JavaScript code that creates an array of numbers and multiplies each number by two to update the array. First, you would declare and initialise a my_array variable like so: var my_array = [ 2 , 4 , 8 , 16 ]; Then, you could decide to write the rest of the code in an imperative style. It would look like this: for ( var index = 0 ; index < my_array . length ; index ++ ) { my_array [ index ] = my_array [ index ] * 2 ; } Notice that the array is updated by iterating through its elements with a for loop. Within the loop, each element of the array is reassigned to a new value equal to twice of its previous value. Now envisage that you would like to rewrite the previous code in a more functional style. The rewritten code would look like this: const multiply_by_two = ( x => x * 2 ); var my_array = my_array . map ( multiply_by_two ); Note that this code uses the callback multiply_by_two , which is passed as an argument to the function map . Here, the callback is defined using arrow notation . Note on the merits of the imperative and functional styles The imperative and functional styles both have their respective merits. The imperative style is more straightforward to understand, while the functional style facilitates conciseness. Callbacks to write asynchronous code You can also use callbacks to write asynchronous code. Suppose that you would like to execute a function after a delay of three seconds. This is how you would program this in JavaScript: function SayHello () { console . log ( 'Hello!' ); } setTimeout ( SayHello , 3000 ); First, you defined the function SayHello by using standard syntax . This function displays the string 'Hello!' in the console. Then, you called the function setTimeout . This function executes a callback after a set amount of time. The function takes in two arguments: SayHello as a callback, and 3000 as the set amount of time before the callback is executed. Note that this amount of time is expressed in milliseconds. As 3000 milliseconds is equal to three seconds, setTimeout executes SayHello after three seconds. You have written asynchronous code, congratulations!","title":"Callbacks"},{"location":"tutorials/callback/#introduction-to-callbacks","text":"This document introduces the notion of a callback , with a focus on its implementation in JavaScript. This document does not provide a comprehensive introduction to JavaScript (for one, please refer to w3schools , for example). The notion of a callback is particularly important to understand for programming in JavaScript. JavaScript is often used to write web applications, which commonly contain numerous callbacks. I wrote this document for people who are already familiar with one programming language, but are only beginning to learn Javascript. Three concepts are essential to understand callbacks: A function is a section of code that can be called. An argument can be passed to a function as input. Asynchronous code is code that is executed with a delay after being called. A callback is a function that is passed as an argument to another function. You may want to use callbacks: as part of your programming style, or to write asynchronous code. Next, you will learn about these uses in more detail.","title":"Introduction to callbacks"},{"location":"tutorials/callback/#callbacks-as-part-of-your-programming-style","text":"You can use callbacks to make your code appear more functional . Functional programming is a style of programming where your code relies on functions. Functional programming is often contrasted with imperative programming , where code relies on instructions. Imagine that you would like to write some JavaScript code that creates an array of numbers and multiplies each number by two to update the array. First, you would declare and initialise a my_array variable like so: var my_array = [ 2 , 4 , 8 , 16 ]; Then, you could decide to write the rest of the code in an imperative style. It would look like this: for ( var index = 0 ; index < my_array . length ; index ++ ) { my_array [ index ] = my_array [ index ] * 2 ; } Notice that the array is updated by iterating through its elements with a for loop. Within the loop, each element of the array is reassigned to a new value equal to twice of its previous value. Now envisage that you would like to rewrite the previous code in a more functional style. The rewritten code would look like this: const multiply_by_two = ( x => x * 2 ); var my_array = my_array . map ( multiply_by_two ); Note that this code uses the callback multiply_by_two , which is passed as an argument to the function map . Here, the callback is defined using arrow notation . Note on the merits of the imperative and functional styles The imperative and functional styles both have their respective merits. The imperative style is more straightforward to understand, while the functional style facilitates conciseness.","title":"Callbacks as part of your programming style"},{"location":"tutorials/callback/#callbacks-to-write-asynchronous-code","text":"You can also use callbacks to write asynchronous code. Suppose that you would like to execute a function after a delay of three seconds. This is how you would program this in JavaScript: function SayHello () { console . log ( 'Hello!' ); } setTimeout ( SayHello , 3000 ); First, you defined the function SayHello by using standard syntax . This function displays the string 'Hello!' in the console. Then, you called the function setTimeout . This function executes a callback after a set amount of time. The function takes in two arguments: SayHello as a callback, and 3000 as the set amount of time before the callback is executed. Note that this amount of time is expressed in milliseconds. As 3000 milliseconds is equal to three seconds, setTimeout executes SayHello after three seconds. You have written asynchronous code, congratulations!","title":"Callbacks to write asynchronous code"},{"location":"tutorials/selector/","text":"Introduction to selectors Document in construction This document introduces the notion of a selector , with a focus on its implementation in the language of Cascading Style Sheets (CSS). This document does not provide a comprehensive introduction to CSS (for one, please refer to w3schools , for example). Selectors are found in every CSS document. Therefore, every student of CSS should learn about them. I wrote this document for people who are already familiar with the Hypertext Markup Language (HTML), but are only beginning to learn CSS. A selector is a sequence of characters that define a search pattern. The selector can be used to select elements of a document that match the search pattern. Selectors of various level of complexity exist in CSS. This document only covers some simple CSS selectors: the universal selector, type selectors, attribute selectors, class selectors, ID selectors. I will introduce the previous selectors by considering how they may be used to improve the layout of a sample HTML page. Suppose that a child called Suzie wrote a page of her personal diary using HTML. In the body of the page, she wrote: < h1 > Suzie's personal diary </ h1 > < h2 > Tuesday, 12th January 2021 </ h2 > < p class = \"entry introductory\" > < span title = \"A mean boy.\" > Tim </ span > was mean to me today. </ p > < p class = \"entry body\" > Today at school, I asked Tim to lend me his eraser because I had forgotten mine at home. He replied that I am the one who should be erased and started laughing. Tim is so mean and < span id = \"angry\" > I hate him </ span > ! </ p > Now, her diary look like this: Suzie is disappointed with the bland look of the page. She decides to use CSS to design the page. She creates a blank CSS file called style.css in the directory of the HTML page, and inserts the following code in the head of the page: < link rel = \"stylesheet\" type = \"text/css\" href = \"style.css\" /> This code enables the use of the CSS file style.css to style the HTML page. Next, we will review how she can add the simple CSS selectors to style.css to design the page. The universal selector The universal selector * selects all elements. Like all selectors, the universal selector is found before a code block that defines a style. Suzie would like all of her text to appear handwritten. She uses the universal selector to select all the text that she wrote. She inserts the following code into style.css : * { font-family : \"Bradley Hand\" ; } This code redesigns Suzie's page into: Suzie likes the improvements, but thinks that she would have still done a much better job if she had designed her diary on paper. Next, we consider how using type selectors can help improve the look of her diary further. Type selectors Type selectors select all HTML elements of a given type. The type selector is the type to be selected. Common types include p , h1 , h2 , div and span . Suzie would like the top heading to be in small caps and the date to be underlined. She adds the following code into the CSS file: h1 { font-variant : small-caps ; } h2 { text-decoration : underline ; } Suzie's personal diary now appears as: To be continued.","title":"Selectors"},{"location":"tutorials/selector/#introduction-to-selectors","text":"Document in construction This document introduces the notion of a selector , with a focus on its implementation in the language of Cascading Style Sheets (CSS). This document does not provide a comprehensive introduction to CSS (for one, please refer to w3schools , for example). Selectors are found in every CSS document. Therefore, every student of CSS should learn about them. I wrote this document for people who are already familiar with the Hypertext Markup Language (HTML), but are only beginning to learn CSS. A selector is a sequence of characters that define a search pattern. The selector can be used to select elements of a document that match the search pattern. Selectors of various level of complexity exist in CSS. This document only covers some simple CSS selectors: the universal selector, type selectors, attribute selectors, class selectors, ID selectors. I will introduce the previous selectors by considering how they may be used to improve the layout of a sample HTML page. Suppose that a child called Suzie wrote a page of her personal diary using HTML. In the body of the page, she wrote: < h1 > Suzie's personal diary </ h1 > < h2 > Tuesday, 12th January 2021 </ h2 > < p class = \"entry introductory\" > < span title = \"A mean boy.\" > Tim </ span > was mean to me today. </ p > < p class = \"entry body\" > Today at school, I asked Tim to lend me his eraser because I had forgotten mine at home. He replied that I am the one who should be erased and started laughing. Tim is so mean and < span id = \"angry\" > I hate him </ span > ! </ p > Now, her diary look like this: Suzie is disappointed with the bland look of the page. She decides to use CSS to design the page. She creates a blank CSS file called style.css in the directory of the HTML page, and inserts the following code in the head of the page: < link rel = \"stylesheet\" type = \"text/css\" href = \"style.css\" /> This code enables the use of the CSS file style.css to style the HTML page. Next, we will review how she can add the simple CSS selectors to style.css to design the page.","title":"Introduction to selectors"},{"location":"tutorials/selector/#the-universal-selector","text":"The universal selector * selects all elements. Like all selectors, the universal selector is found before a code block that defines a style. Suzie would like all of her text to appear handwritten. She uses the universal selector to select all the text that she wrote. She inserts the following code into style.css : * { font-family : \"Bradley Hand\" ; } This code redesigns Suzie's page into: Suzie likes the improvements, but thinks that she would have still done a much better job if she had designed her diary on paper. Next, we consider how using type selectors can help improve the look of her diary further.","title":"The universal selector"},{"location":"tutorials/selector/#type-selectors","text":"Type selectors select all HTML elements of a given type. The type selector is the type to be selected. Common types include p , h1 , h2 , div and span . Suzie would like the top heading to be in small caps and the date to be underlined. She adds the following code into the CSS file: h1 { font-variant : small-caps ; } h2 { text-decoration : underline ; } Suzie's personal diary now appears as: To be continued.","title":"Type selectors"}]}